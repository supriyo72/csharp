//destructor
// A destructor is a special method which has the same name as the class but starts with the character ~ before the class name and immediately de-allocates memory of objects that are no longer required.

// A C# class can also have a destructor (only one is allowed per class), which is a special method and also has the same name as the class but prefixed with a special symbol ~.

// A destructor of an object is executed when the object is no longer required in order to de-allocate memory of the object.

// Following are the features of destructors:

// Destructors cannot be overloaded or inherited.
// Destructors cannot be explicitly invoked.
// Destructors cannot specify access modifiers and cannot take parameters.


using System;
    class person
    {
        public string Name;
        public int Age;

        public person(string Name, int Age)
        {
            this.Name = Name;
            this.Age = Age;
        }

        public string getName()
        {
            return this.Name;
        }
        public int getAge()
        {
            return this.Age;
        }

        ~person()
        {
            Console.WriteLine("Destructor has been invoked !!");
        }

    }
    class Program
    {
        static void Main(string[] args)
        {
            person Ali = new person("Ali",22);
            person Anas = new person("Anas", 23);
            Console.WriteLine(Ali.getName());
            Console.WriteLine(Ali.getAge());
            Console.WriteLine("--------------");
            Console.WriteLine(Anas.getName());
            Console.WriteLine(Anas.getAge());
            //Console.ReadLine();
           
        }
    }
